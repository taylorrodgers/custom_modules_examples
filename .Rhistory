div(class="three wide column",
div(class="ui padded segment",
selectInput("SchoolCounty",
"School County:",
choices=sort(unique(TopCounties$county))),
selectInput("SchoolUID","School ID",choices=""),
selectInput("PositionGroup","Position Group",choices=c("Principal"=1,"Super Intendent"=2),select=1))),
div(class="three wide column",
div(class="ui padded segment",
h3("Academic Performance Index (API)"),
h3(class="ui grey sub header",textOutput("CountyName")),
div(class="ui row",
h1(class="ui header",textOutput("CountyAPI"),inline=TRUE)),
h3(class="ui dividing sub header","API By School Type"),
plotOutput("CountySchoolTypeAPI",height = "125px"),
h3(class="ui dividing sub header","API By Community Type"),
plotOutput("CountyCommunityTypeAPI",height = "125px"))
),
div(class="three wide column",
MySchoolPerformanceUI("Principals")
),
div(class="seven wide column",
div(class = "ui padded segment container",
plotOutput("DataExplore")
),
tableOutput("tester")
)
)
)
)
server <- function(input, output,session) {
MySchoolPerformanceServer("Principals",data=reactive({Dat}),county=reactive({input$SchoolCounty}),uid=reactive({input$SchoolUID}))
observeEvent(input$SchoolCounty,{
SchoolUIDs <- Dat %>%
filter(county %in% c(input$SchoolCounty)) %>%
select(uid)
updateSelectInput(session,"SchoolUID",choices=SchoolUIDs$uid)
})
output$tester <- renderTable({
Dat %>%
filter(county %in% c(input$SchoolCounty)) %>%
group_by(schooltype) %>%
select(schooltype,api)
})
output$CountyName <- renderText({
paste0(input$SchoolCounty," County")
})
output$CountyAPI <- renderText({
Dat <-  Dat %>%
filter(county %in% c(input$SchoolCounty)) %>%
summarize(Average=mean(api))
round(Dat$Average)
})
output$CountySchoolTypeAPI <- renderPlot({
CountyAPI <- Dat %>%
filter(county %in% c(input$SchoolCounty)) %>%
group_by(schooltype) %>%
summarize(api=round(mean(api)))
NewOrder <- c("High School","Middle School","Elementary")
CountyAPI$schooltype <- factor(CountyAPI$schooltype,levels=NewOrder)
CountyAPI <- CountyAPI[order(CountyAPI$schooltype),]
MicroPlots(CountyAPI,CountyAPI$api,CountyAPI$schooltype)
# ggplot(CountyAPI,aes(x=api,y=schooltype)) +
#   geom_col() +
#   geom_text(aes(label=api),color="white",size=4.25,hjust=1.5) +
#   theme_pander() +
#   theme(axis.text.x=element_blank(),
#         axis.title.x=element_blank(),
#         axis.title.y=element_blank(),
#         plot.title=element_blank()) +
#   labs(title="")
})
output$CountyCommunityTypeAPI <- renderPlot({
CountyAPI <- Dat %>%
filter(county %in% c(input$SchoolCounty)) %>%
group_by(community) %>%
summarize(api=round(mean(api)))
ggplot(CountyAPI,aes(x=api,y=community)) +
geom_col() +
geom_text(aes(label=api),color="white",size=4.25,hjust=1.5) +
theme_pander() +
theme(axis.text.x=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
plot.title=element_blank()) +
labs(title="")
})
output$DataExplore <- renderPlot({
Df <- Dat %>% filter(county %in% c(input$SchoolCounty)) %>% slice_max(api,n=10)
Df$uid <- as.factor(Df$uid)
ggplot(Df,aes(x=api,y=uid)) +
geom_col() +
theme_pander()
})
}
shinyApp(ui, server)
}
SchoolPerformanceApp()
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(shiny.semantic)
library(semantic.dashboard)
library(stevedata)
library(tidyverse)
library(ggthemes)
source("./modules_principals/principal_1.R",local=TRUE)
### universal metrics
# avg api
# avg high school api
# avg elementary school api
# alternatively, it could be suburban versus urban
# use kpi boxes plus bar graphs from mint.com as inspiration
### "administrator" view for individual counties
# worst performers by api with urban, suburban toggles
# worst performers based on fully qualified teachers
# worst performers based on meals
### "school"-level view
# comparison of api versus the average
# comparison of meals versus the average
# comparison of full qualified teachers versus the average
Dat <- fakeAPI
Dat$uid <- paste("USD",as.character(Dat$uid))
Dat$schooltype <- ifelse(Dat$schooltype=="E","Elementary",
ifelse(Dat$schooltype=="M","Middle School","High School"))
TopCounties <- Dat %>% group_by(county) %>% summarize(n=n()) %>% arrange(desc(n)) %>% .[1:15,]
MicroPlots <- function(dat,x,y) {
ggplot(dat,aes(x=x,y=y)) +
geom_col() +
geom_text(aes(label=x),color="white",size=4.25,hjust=1.5) +
theme_pander() +
theme(axis.text.x=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
plot.title=element_blank()) +
labs(title="")
}
### Primary app
SchoolPerformanceApp <- function() {
ui <- dashboardPage(
dashboardHeader(left=h3(class="ui inverted header","High School Performance"),
inverted=TRUE,
color="grey",
menu_button_label=NULL),
dashboardSidebar(
sidebarMenu(
menuItem(tabName = "home", text = "Home", icon = icon("home")),
menuItem(tabName = "another", text = "Info", icon = icon("info"))
),
color="black",
inverted=TRUE,
visible=FALSE,
class="ui secondary vertical menu"),
dashboardBody(
div(class="ui stackable grid",
div(class="three wide column",
div(class="ui padded segment",
selectInput("SchoolCounty",
"School County:",
choices=sort(unique(TopCounties$county))),
selectInput("SchoolUID","School ID",choices=""),
selectInput("PositionGroup","Position Group",choices=c("Principal"=1,"Super Intendent"=2),select=1))),
div(class="three wide column",
div(class="ui padded segment",
h3("Academic Performance Index (API)"),
h3(class="ui grey sub header",textOutput("CountyName")),
div(class="ui row",
h1(class="ui header",textOutput("CountyAPI"),inline=TRUE)),
h3(class="ui dividing sub header","API By School Type"),
plotOutput("CountySchoolTypeAPI",height = "125px"),
h3(class="ui dividing sub header","API By Community Type"),
plotOutput("CountyCommunityTypeAPI",height = "125px"))
),
div(class="three wide column",
MySchoolPerformanceUI("Principals")
),
div(class="seven wide column",
div(class = "ui padded segment container",
plotOutput("DataExplore")
),
tableOutput("tester")
)
)
)
)
server <- function(input, output,session) {
MySchoolPerformanceServer("Principals",data=reactive({Dat}),county=reactive({input$SchoolCounty}),uid=reactive({input$SchoolUID}))
observeEvent(input$SchoolCounty,{
SchoolUIDs <- Dat %>%
filter(county %in% c(input$SchoolCounty)) %>%
select(uid)
updateSelectInput(session,"SchoolUID",choices=SchoolUIDs$uid)
})
output$tester <- renderTable({
Dat %>%
filter(county %in% c(input$SchoolCounty)) %>%
group_by(schooltype) %>%
select(schooltype,api)
})
output$CountyName <- renderText({
paste0(input$SchoolCounty," County")
})
output$CountyAPI <- renderText({
Dat <-  Dat %>%
filter(county %in% c(input$SchoolCounty)) %>%
summarize(Average=mean(api))
round(Dat$Average)
})
output$CountySchoolTypeAPI <- renderPlot({
CountyAPI <- Dat %>%
filter(county %in% c(input$SchoolCounty)) %>%
group_by(schooltype) %>%
summarize(api=round(mean(api)))
NewOrder <- c("High School","Middle School","Elementary")
CountyAPI$schooltype <- factor(CountyAPI$schooltype,levels=NewOrder)
CountyAPI <- CountyAPI[order(CountyAPI$schooltype),]
MicroPlots(CountyAPI,CountyAPI$api,CountyAPI$schooltype)
# ggplot(CountyAPI,aes(x=api,y=schooltype)) +
#   geom_col() +
#   geom_text(aes(label=api),color="white",size=4.25,hjust=1.5) +
#   theme_pander() +
#   theme(axis.text.x=element_blank(),
#         axis.title.x=element_blank(),
#         axis.title.y=element_blank(),
#         plot.title=element_blank()) +
#   labs(title="")
})
output$CountyCommunityTypeAPI <- renderPlot({
CountyAPI <- Dat %>%
filter(county %in% c(input$SchoolCounty)) %>%
group_by(community) %>%
summarize(api=round(mean(api)))
ggplot(CountyAPI,aes(x=api,y=community)) +
geom_col() +
geom_text(aes(label=api),color="white",size=4.25,hjust=1.5) +
theme_pander() +
theme(axis.text.x=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
plot.title=element_blank()) +
labs(title="")
})
output$DataExplore <- renderPlot({
Df <- Dat %>% filter(county %in% c(input$SchoolCounty)) %>% slice_max(api,n=10)
Df$uid <- as.factor(Df$uid)
ggplot(Df,aes(x=api,y=uid)) +
geom_col() +
theme_pander()
})
}
shinyApp(ui, server)
}
SchoolPerformanceApp()
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(shiny.semantic)
library(semantic.dashboard)
library(stevedata)
library(tidyverse)
library(ggthemes)
source("./modules_principals/principal_1.R",local=TRUE)
### universal metrics
# avg api
# avg high school api
# avg elementary school api
# alternatively, it could be suburban versus urban
# use kpi boxes plus bar graphs from mint.com as inspiration
### "administrator" view for individual counties
# worst performers by api with urban, suburban toggles
# worst performers based on fully qualified teachers
# worst performers based on meals
### "school"-level view
# comparison of api versus the average
# comparison of meals versus the average
# comparison of full qualified teachers versus the average
Dat <- fakeAPI
Dat$uid <- paste("USD",as.character(Dat$uid))
Dat$schooltype <- ifelse(Dat$schooltype=="E","Elementary",
ifelse(Dat$schooltype=="M","Middle School","High School"))
TopCounties <- Dat %>% group_by(county) %>% summarize(n=n()) %>% arrange(desc(n)) %>% .[1:15,]
MicroPlots <- function(dat,x,y) {
ggplot(dat,aes(x=x,y=y)) +
geom_col() +
geom_text(aes(label=x),color="white",size=4.25,hjust=1.5) +
theme_pander() +
theme(axis.text.x=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
plot.title=element_blank()) +
labs(title="")
}
### Primary app
SchoolPerformanceApp <- function() {
ui <- dashboardPage(
dashboardHeader(left=h3(class="ui inverted light header","High School Performance"),
inverted=TRUE,
color="grey",
menu_button_label=NULL),
dashboardSidebar(
sidebarMenu(
menuItem(tabName = "home", text = "Home", icon = icon("home")),
menuItem(tabName = "another", text = "Info", icon = icon("info"))
),
color="black",
inverted=TRUE,
visible=FALSE,
class="ui secondary vertical menu"),
dashboardBody(
div(class="ui stackable grid",
div(class="three wide column",
div(class="ui padded segment",
selectInput("SchoolCounty",
"School County:",
choices=sort(unique(TopCounties$county))),
selectInput("SchoolUID","School ID",choices=""),
selectInput("PositionGroup","Position Group",choices=c("Principal"=1,"Super Intendent"=2),select=1))),
div(class="three wide column",
div(class="ui padded segment",
h3("Academic Performance Index (API)"),
h3(class="ui grey sub header",textOutput("CountyName")),
div(class="ui row",
h1(class="ui header",textOutput("CountyAPI"),inline=TRUE)),
h3(class="ui dividing sub header","API By School Type"),
plotOutput("CountySchoolTypeAPI",height = "125px"),
h3(class="ui dividing sub header","API By Community Type"),
plotOutput("CountyCommunityTypeAPI",height = "125px"))
),
div(class="three wide column",
MySchoolPerformanceUI("Principals")
),
div(class="seven wide column",
div(class = "ui padded segment container",
plotOutput("DataExplore")
),
tableOutput("tester")
)
)
)
)
server <- function(input, output,session) {
MySchoolPerformanceServer("Principals",data=reactive({Dat}),county=reactive({input$SchoolCounty}),uid=reactive({input$SchoolUID}))
observeEvent(input$SchoolCounty,{
SchoolUIDs <- Dat %>%
filter(county %in% c(input$SchoolCounty)) %>%
select(uid)
updateSelectInput(session,"SchoolUID",choices=SchoolUIDs$uid)
})
output$tester <- renderTable({
Dat %>%
filter(county %in% c(input$SchoolCounty)) %>%
group_by(schooltype) %>%
select(schooltype,api)
})
output$CountyName <- renderText({
paste0(input$SchoolCounty," County")
})
output$CountyAPI <- renderText({
Dat <-  Dat %>%
filter(county %in% c(input$SchoolCounty)) %>%
summarize(Average=mean(api))
round(Dat$Average)
})
output$CountySchoolTypeAPI <- renderPlot({
CountyAPI <- Dat %>%
filter(county %in% c(input$SchoolCounty)) %>%
group_by(schooltype) %>%
summarize(api=round(mean(api)))
NewOrder <- c("High School","Middle School","Elementary")
CountyAPI$schooltype <- factor(CountyAPI$schooltype,levels=NewOrder)
CountyAPI <- CountyAPI[order(CountyAPI$schooltype),]
MicroPlots(CountyAPI,CountyAPI$api,CountyAPI$schooltype)
# ggplot(CountyAPI,aes(x=api,y=schooltype)) +
#   geom_col() +
#   geom_text(aes(label=api),color="white",size=4.25,hjust=1.5) +
#   theme_pander() +
#   theme(axis.text.x=element_blank(),
#         axis.title.x=element_blank(),
#         axis.title.y=element_blank(),
#         plot.title=element_blank()) +
#   labs(title="")
})
output$CountyCommunityTypeAPI <- renderPlot({
CountyAPI <- Dat %>%
filter(county %in% c(input$SchoolCounty)) %>%
group_by(community) %>%
summarize(api=round(mean(api)))
ggplot(CountyAPI,aes(x=api,y=community)) +
geom_col() +
geom_text(aes(label=api),color="white",size=4.25,hjust=1.5) +
theme_pander() +
theme(axis.text.x=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
plot.title=element_blank()) +
labs(title="")
})
output$DataExplore <- renderPlot({
Df <- Dat %>% filter(county %in% c(input$SchoolCounty)) %>% slice_max(api,n=10)
Df$uid <- as.factor(Df$uid)
ggplot(Df,aes(x=api,y=uid)) +
geom_col() +
theme_pander()
})
}
shinyApp(ui, server)
}
SchoolPerformanceApp()
Dat
Dat %>%
Dat <- Dat %>% filter(county %in% TopCounties$county)
Dat
Dat %>%
group_by(county) %>%
summarize(minapi=min(api),
diffmeals=max(api)-min(api))
First <- Dat %>%
group_by(county) %>%
summarize(minapi=min(api),
diffmeals=max(api)-min(api))
First %>%
arrange(minapi) %>%
select(county)
First %>%
arrange(desc(diffmeals)) %>%
select(county)
?pivot_wider
##
Dat %>%
transmute(community=ifelse(community=="Urban","Urban","Non-Urban")) %>%
pivot_wider(names_from=community,values_from=api)
Dat %>%
transmute(community=ifelse(community=="Urban","Urban","Non-Urban")) %>%
pivot_wider(names_from=community,values_from=api)
##
Dat %>%
mutate(community=ifelse(community=="Urban","Urban","Non-Urban")) %>%
pivot_wider(names_from=community,values_from=api)
##
Dat %>%
mutate(community=ifelse(community=="Urban","Urban","NonUrban")) %>%
select(county,uid,community,api) %>%
pivot_wider(names_from=community,values_from=api)
Dat %>%
mutate(community=ifelse(community=="Urban","Urban","NonUrban")) %>%
select(county,uid,community,api)
##
Dat %>%
mutate(community=ifelse(community=="Urban","Urban","NonUrban")) %>%
select(county,uid,community,api) %>%
pivot_wider(id_cols=community,values_from=api)
##
Dat %>%
mutate(community=ifelse(community=="Urban","Urban","NonUrban")) %>%
select(county,uid,community,api) %>%
pivot_wider(names_from=community,values_from=api)
##
Dat %>%
filter(county %in% TopCounties$county) %>%
mutate(community=ifelse(community=="Urban","Urban","NonUrban")) %>%
select(county,uid,community,api) %>%
pivot_wider(names_from=community,values_from=api)
Dat %>%
filter(county %in% TopCounties$county) %>%
mutate(community=ifelse(community=="Urban","Urban","NonUrban")) %>%
select(county,uid,community,api)
##
Dat %>%
filter(county %in% TopCounties$county) %>%
mutate(community=ifelse(community=="Urban","Urban","NonUrban")) %>%
select(county,community,api) %>%
pivot_wider(names_from=community,values_from=api)
Dat %>%
filter(county %in% TopCounties$county) %>%
mutate(community=ifelse(community=="Urban","Urban","NonUrban")) %>%
select(county,community,api)
Dat %>%
filter(county %in% TopCounties$county) %>%
mutate(community=ifelse(community=="Urban","Urban","NonUrban")) %>%
select(county,community,api) %>%
pivot_wider(names_from=community,values_from=api)
Dat %>%
filter(county %in% TopCounties$county) %>%
mutate(community=ifelse(community=="Urban","Urban","NonUrban")) %>%
select(county,community,api)
##
Dat %>%
filter(county %in% TopCounties$county) %>%
mutate(community=ifelse(community=="Urban","Urban","NonUrban")) %>%
group_by(county,community) %>%
summarize(api=mean(api)) %>%
pivot_wider(names_from=community,values_from=api)
Dat %>%
filter(county %in% TopCounties$county) %>%
mutate(community=ifelse(community=="Urban","Urban","NonUrban")) %>%
group_by(county,community) %>%
summarize(api=mean(api)) %>%
pivot_wider(names_from=community,values_from=api) %>%
transmute(Diff=NonUrban-Urban) %>%
arrange(desc(Diff))
